// ⚠️ WARNING: DO NOT USE THIS SCHEMA FOR MIGRATIONS ⚠️
// This schema is for Prisma client generation only.
// All migrations should be run from the database service.
// This ensures consistent schema management across all services.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum for fitness levels
enum FitnessLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

// Enum for gender
enum Gender {
  MALE
  FEMALE
  NON_BINARY
  OTHER
}

// Enum for onboarding status
enum OnboardingStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

// User model
model User {
  id                String    @id @default(uuid())
  email             String    @unique
  password          String
  refreshToken      String?
  resetPasswordToken String?
  resetPasswordExpiry DateTime?
  onboardingStatus  OnboardingStatus @default(NOT_STARTED)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  profiles          Profile[]
  fitnessGoals      FitnessGoal[]
  workoutStats      WorkoutStat[]

  @@map("users")
  @@ignore
}

// User profile information
model Profile {
  id             String   @id @default(uuid())
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id]) @ignore
  firstName      String?
  lastName       String?
  bio            String?
  profilePicture String?
  phoneNumber    String?   // For 2FA
  dateOfBirth    DateTime?
  gender         Gender?
  weight         Float?   // in kg
  height         Float?   // in cm
  fitnessLevel   FitnessLevel?  // beginner, intermediate, advanced.
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relationships
  followers      Follow[] @relation("following")
  following      Follow[] @relation("follower")

  @@map("profiles")
}

// Follow relationship
model Follow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  // Relationships
  follower    Profile  @relation("follower", fields: [followerId], references: [id])
  following   Profile  @relation("following", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@map("follows")
}

// User fitness goals
model FitnessGoal {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id]) @ignore
  title       String
  description String?
  targetDate  DateTime?
  achieved    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("fitness_goals")
}

// User workout stats
model WorkoutStat {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id]) @ignore
  workout     String
  duration    Int      // in minutes
  caloriesBurned Int?
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("workout_stats")
}